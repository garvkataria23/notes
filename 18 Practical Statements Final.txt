17 Practical Statements :

1) Question: Log File Creator

$file = "script_log.txt"
FileWrite($file, @YEAR & "-" & @MON & "-" & @MDAY & " " & @HOUR & ":" & @MIN & ":" & @SEC & " - Script executed successfully." & @CRLF)
MsgBox(0, "Log Updated", "Log updated successfully.")

(check file in c drive/users/pc/documents)


2) Question: Custom HotKey Actions

; Assign hotkeys to specific actions
; HotKeySet binds a key combination to a custom function

HotKeySet("^!n", "OpenNotepad") ; Ctrl + Alt + N
HotKeySet("^!b", "OpenFolder")  ; Ctrl + Alt + B
HotKeySet("^!e", "ExitScript")  ; Ctrl + Alt + E

; Infinite loop to keep the script running
While 1
    Sleep(100) ; Prevent high CPU usage
WEnd

; Function to open Notepad
Func OpenNotepad()
    Run("notepad.exe") ; Run Notepad
EndFunc

; Function to open a specific folder
Func OpenFolder()
    Run("explorer.exe C:\Your\Folder\Path") ; Replace with your desired folder path
EndFunc

; Function to exit the script
Func ExitScript()
    Exit ; Stops the script
EndFunc



3) Question: Folder Size Calculator

#include <EditConstants.au3>
#include <GUIConstantsEx.au3>
#include <StaticConstants.au3>
#include <WindowsConstants.au3> 

GUICreate("Calculator", 260, 230) 

$idBtn1 = GUICtrlCreateButton("1", 54, 138, 36, 29) 

; Digit's buttons
Local $idBtn0 = GUICtrlCreateButton("0", 54, 171, 36, 29)
Local $idBtn1 = GUICtrlCreateButton("1", 54, 138, 36, 29)
Local $idBtn2 = GUICtrlCreateButton("2", 93, 138, 36, 29)
Local $idBtn3 = GUICtrlCreateButton("3", 132, 138, 36, 29)
Local $idBtn4 = GUICtrlCreateButton("4", 54, 106, 36, 29)
Local $idBtn5 = GUICtrlCreateButton("5", 93, 106, 36, 29)
Local $idBtn6 = GUICtrlCreateButton("6", 132, 106, 36, 29)
Local $idBtn7 = GUICtrlCreateButton("7", 54, 73, 36, 29)
Local $idBtn8 = GUICtrlCreateButton("8", 93, 73, 36, 29)
Local $idBtn9 = GUICtrlCreateButton("9", 132, 73, 36, 29)
Local $idBtnPeriod = GUICtrlCreateButton(".", 132, 171, 36, 29)

; Memory's buttons
Local $idBtnMClear = GUICtrlCreateButton("MC", 8, 73, 36, 29)
Local $idBtnMRestore = GUICtrlCreateButton("MR", 8, 106, 36, 29)
Local $idBtnMStore = GUICtrlCreateButton("MS", 8, 138, 36, 29)
Local $idBtnMAdd = GUICtrlCreateButton("M+", 8, 171, 36, 29)

; Operators
Local $idBtnChangeSign = GUICtrlCreateButton("+/-", 93, 171, 36, 29)
Local $idBtnDivision = GUICtrlCreateButton("/", 171, 73, 36, 29)
Local $idBtnMultiplication = GUICtrlCreateButton("*", 171, 106, 36, 29)
Local $idBtnSubtract = GUICtrlCreateButton("-", 171, 138, 36, 29)
Local $idBtnAdd = GUICtrlCreateButton("+", 171, 171, 36, 29)
Local $idBtnAnswer = GUICtrlCreateButton("=", 210, 171, 36, 29)
Local $idBtnInverse = GUICtrlCreateButton("1/x", 210, 138, 36, 29)
Local $idBtnSqrt = GUICtrlCreateButton("Sqrt", 210, 73, 36, 29)
Local $idBtnPercentage = GUICtrlCreateButton("%", 210, 106, 36, 29)
Local $idBtnBackspace = GUICtrlCreateButton("Backspace", 54, 37, 63, 29)
Local $idBtnClearE = GUICtrlCreateButton("CE", 120, 37, 62, 29)
Local $idBtnClear = GUICtrlCreateButton("C", 185, 37, 62, 29)

Local $idEdtScreen = GUICtrlCreateEdit("0.", 8, 2, 239, 23)
Local $idLblMemory = GUICtrlCreateLabel("", 12, 39, 27, 26) 


GUISetState() 

Local $msg
Do
        $msg = GUIGetMsg()

Until $msg = $GUI_EVENT_CLOSE 


Local $idEdtScreen = GUICtrlCreateEdit("0.", 8, 2, 239, 23, BitOR($ES_READONLY, $ES_RIGHT), $WS_EX_STATICEDGE) 
Local $idLblMemory = GUICtrlCreateLabel("", 12, 39, 27, 26, $SS_SUNKEN)


4) Question : Basic GUI File Opener

#include <GUIConstantsEx.au3>
#include <WindowsConstants.au3>
#include <File.au3>

; Main GUI window
$hGUI = GUICreate("File Path Finder", 400, 120)
GUISetBkColor(0xF0F0F0, $hGUI) ; Set background color

; Path entry input
$inputPath = GUICtrlCreateInput("", 20, 30, 360, 20)

; Buttons
$btnBrowse = GUICtrlCreateButton("Browse", 20, 70, 80, 30)
$btnClear = GUICtrlCreateButton("Clear", 120, 70, 80, 30)

GUISetState(@SW_SHOW, $hGUI)

While 1
    Switch GUIGetMsg()
        Case $GUI_EVENT_CLOSE
            Exit

        Case $btnBrowse
            ; Browse for a file
            Local $filePath = FileOpenDialog("Select a file", @MyDocumentsDir, "Text Files (*.txt)|All Files (*.*)", $FD_FILEMUSTEXIST)
            If @error = 0 Then
                GUICtrlSetData($inputPath, $filePath)
            Else
                MsgBox(0, "Error", "No file selected.")
            EndIf

        Case $btnClear
            ; Clear the input
            GUICtrlSetData($inputPath, "")
    EndSwitch
WEnd


Question 5) Text Repeater

;; AutoIt script to repeatedly type a phrase into an open application

#include <MsgBoxConstants.au3>
#include <GUIConstantsEx.au3>

Global $phrase = InputBox("Auto Typer", "Enter the phrase to type:")
If @error Then Exit ; Exit if the user cancels

Global $repeat = InputBox("Auto Typer", "Enter the number of times to repeat:", "10")
If @error Then Exit ; Exit if the user cancels

If Not StringIsDigit($repeat) Or $repeat < 1 Then
    MsgBox($MB_ICONERROR, "Error", "Please enter a valid number.")
    Exit
EndIf

MsgBox($MB_ICONINFORMATION, "Instructions", "Switch to the target application and click OK. Typing will start in 3 seconds.")

Sleep(3000) ; Wait 3 seconds before starting

For $i = 1 To $repeat
    Send($phrase & "{ENTER}") ; Sends the phrase and presses Enter
    Sleep(500) ; Short delay to prevent overload
Next

MsgBox($MB_ICONINFORMATION, "Done", "Typing completed!")


Question 6) Automate Folder Creator


#include <MsgBoxConstants.au3>
#include <File.au3>

; Define the base directory where the folder will be created
Global $sBaseDir = "C:\MyFolders"

; Check if base directory exists, if not, create it
If Not FileExists($sBaseDir) Then
    DirCreate($sBaseDir)
EndIf

; Prompt the user to enter a folder name
Global $sFolderName = InputBox("Create Folder", "Enter the folder name:")

; Check if the user entered a name
If $sFolderName = "" Then
    MsgBox($MB_ICONWARNING, "Error", "No folder name entered. Exiting...")
    Exit
EndIf

; Construct the full path of the new folder
Global $sFolderPath = $sBaseDir & "\" & $sFolderName

; Check if the folder already exists
If FileExists($sFolderPath) Then
    MsgBox($MB_ICONEXCLAMATION, "Error", "Folder already exists!")
Else
    ; Create the folder
    DirCreate($sFolderPath)
    MsgBox($MB_ICONINFORMATION, "Success", "Folder '" & $sFolderName & "' created in " & $sBaseDir)
EndIf



Question 7) Automated Window Resizer

; Script to open Notepad, identify the window, and resize it

; Define the window title and dimensions
Local $windowTitle = "Untitled - Notepad"
Local $width = 600
Local $height = 400

; Run Notepad
Run("notepad.exe")

; Wait for the Notepad window to exist
If WinWait($windowTitle, "", 5) Then ; Wait up to 5 seconds for the window to appear
    ; Activate the window
    WinActivate($windowTitle)
    
    ; Wait for the window to become active
    WinWaitActive($windowTitle)
    
    ; Resize the window
    WinMove($windowTitle, "", Default, Default, $width, $height)
    
    ; Display a success message
    MsgBox(0, "Success", "Notepad has been opened and resized to " & $width & "x" & $height & ".")
Else
    ; If the window doesn't exist, show an error message
    MsgBox(16, "Error", "The Notepad window could not be opened or found.")
EndIf


Question 8) Simple Process Checker

Global $sProcessName = InputBox("Process Checker", "Enter the process name to check (e.g., notepad):")


If $sProcessName = "" Then
    MsgBox(48, "Process Checker", "No process name provided. Exiting...")
    Exit
EndIf


If StringRight($sProcessName, 4) <> ".exe" Then
    $sProcessName &= ".exe"
EndIf


If ProcessExists($sProcessName) Then
    MsgBox(64, "Process Checker", $sProcessName & " is already running.")
Else
    MsgBox(48, "Process Checker", $sProcessName & " is not running.")
EndIf


Question 9) Temporary File Cleaner


; Get the system temporary folder path
Local $tempFolder = @TempDir

; Count the number of files deleted
Local $deletedCount = 0

; Use FileFindFirstFile and FileFindNextFile to delete files
Local $search = FileFindFirstFile($tempFolder & "\*.*")

; Check if the folder is accessible
If $search = -1 Then
    MsgBox(16, "Temporary File Cleaner", "Failed to access the temp folder.")
    Exit
EndIf

; Loop through the files and delete them
While 1
    Local $file = FileFindNextFile($search)
    If @error Then ExitLoop

    If FileDelete($tempFolder & "\" & $file) Then
        $deletedCount += 1
    EndIf
WEnd

; Close the search handle
FileClose($search)

; Display a summary of the files deleted
MsgBox(64, "Temporary File Cleaner", $deletedCount & " files deleted.")


Question 10) Window Title Logger

; Include the Date UDF
#include <Date.au3>

; Path to the log file
Global $logFile = @ScriptDir & "\window_titles_log.txt"

; Initialize the log file (create or overwrite)
FileDelete($logFile)  ; Delete the file if it exists
FileWrite($logFile, "Window Title Log: " & @CRLF)

; Variable to store the previous window title
Global $lastWindowTitle = ""

While 1
    ; Get the title of the currently active window
    $currentWindowTitle = WinGetTitle("[ACTIVE]")
    
    ; If the window title has changed, log it
    If $currentWindowTitle <> $lastWindowTitle And $currentWindowTitle <> "" Then
        ; Log the new window title with a timestamp
        FileWrite($logFile, "[" & _NowCalc() & "] " & $currentWindowTitle & @CRLF)
        
        ; Update the last window title
        $lastWindowTitle = $currentWindowTitle
    EndIf
    
    ; Sleep for a short period to avoid high CPU usage
    Sleep(100)
WEnd


Question 11) Folder Size Calculator

#include <File.au3>

; Prompt user to select a folder
Global $folderPath = FileSelectFolder("Select a Folder", "")

; Check if the user selected a folder
If @error Then
    MsgBox(16, "Error", "No folder selected. Exiting script.")
    Exit
EndIf

; Function to calculate folder size
Func GetFolderSize($sFolder)
    Local $iSize = 0
    Local $aFileList = _FileListToArray($sFolder, "*", 1)
    
    If IsArray($aFileList) Then
        For $i = 1 To $aFileList[0]
            $iSize += FileGetSize($sFolder & "\" & $aFileList[$i])
        Next
    EndIf
    
    Local $aFolderList = _FileListToArray($sFolder, "*", 2)
    
    If IsArray($aFolderList) Then
        For $i = 1 To $aFolderList[0]
            $iSize += GetFolderSize($sFolder & "\" & $aFolderList[$i])
        Next
    EndIf
    
    Return $iSize
EndFunc

; Get the total size of the selected folder
Local $totalSize = GetFolderSize($folderPath)

; Convert size to human-readable format
Func ConvertSize($size)
    If $size < 1024 Then
        Return $size & " Bytes"
    ElseIf $size < 1048576 Then
        Return Round($size / 1024, 2) & " KB"
    ElseIf $size < 1073741824 Then
        Return Round($size / 1048576, 2) & " MB"
    Else
        Return Round($size / 1073741824, 2) & " GB"
    EndIf
EndFunc

; Display the result
MsgBox(64, "Folder Size", "The total size of the folder is: " & ConvertSize($totalSize))


Question 12) Window Focus Checker

; Script to log the titles of currently active windows to a text file

; Define the output log file
Global $logFile = @ScriptDir & "\ActiveWindowsLog.txt"

; Open the log file for appending
FileWrite($logFile, "--- Active Window Logger Started: " & @YEAR & "/" & @MON & "/" & @MDAY & " " & @HOUR & ":" & @MIN & ":" & @SEC & " ---" & @CRLF)

; Variable to store the last window title to avoid duplicate logging
Global $lastTitle = ""

While True
    ; Get the handle of the currently active window
    $activeWindowHandle = WinGetHandle("[ACTIVE]")

    ; Get the title of the currently active window
    $activeWindowTitle = WinGetTitle($activeWindowHandle)

    ; Check if the title has changed and is not empty
    If $activeWindowTitle <> $lastTitle And $activeWindowTitle <> "" Then
        ; Log the new window title with a timestamp
        FileWrite($logFile, @YEAR & "/" & @MON & "/" & @MDAY & " " & @HOUR & ":" & @MIN & ":" & @SEC & " - " & $activeWindowTitle & @CRLF)

        ; Update the last title
        $lastTitle = $activeWindowTitle
    EndIf

    ; Wait for a short interval before checking again
    Sleep(500)
WEnd


Question 13) Simple Text File Reader

; Script to open a specified .txt file, read its contents, and display them in a GUI

#include <GUIConstantsEx.au3> ; Include GUI constants

; Define the missing constants manually (if not already defined in your environment)
Global Const $ES_AUTOVSCROLL = 0x0040
Global Const $ES_MULTILINE = 0x0004
Global Const $WS_VSCROLL = 0x00200000

; Define the file to read
Global $filePath = FileOpenDialog("Select a Text File", @ScriptDir, "Text Files (*.txt)", 1)

; Check if the user selected a file
If @error Then
    MsgBox(16, "Error", "No file selected. Exiting script.")
    Exit
EndIf

; Open the file for reading
Local $fileHandle = FileOpen($filePath, 0)

; Check if the file was opened successfully
If $fileHandle = -1 Then
    MsgBox(16, "Error", "Failed to open the file. Exiting script.")
    Exit
EndIf

; Read the file contents
Local $fileContents = FileRead($fileHandle)

; Close the file
FileClose($fileHandle)

; Check if the file is empty
If $fileContents = "" Then
    MsgBox(48, "Info", "The file is empty.")
    Exit
EndIf

; Create a GUI to display the file contents
Local $gui = GUICreate("File Contents Viewer", 600, 400)
Local $edit = GUICtrlCreateEdit($fileContents, 10, 10, 580, 380, BitOR($ES_AUTOVSCROLL, $ES_MULTILINE, $WS_VSCROLL))
GUICtrlSetFont($edit, 10, 400, 0, "Consolas")

; Show the GUI
GUISetState(@SW_SHOW, $gui)

; Wait for the user to close the GUI
While True
    Switch GUIGetMsg()
        Case $GUI_EVENT_CLOSE
            ExitLoop
    EndSwitch
WEnd

; Clean up and exit
GUIDelete($gui)
Exit


Question 14) Simple Screenshot Tool  (I think there might be an error)

#include <Date.au3>

HotKeySet("{PRINTSCREEN}", "CaptureScreenshot") ; Assign PrintScreen as the hotkey

Func CaptureScreenshot()
    ; Define the save folder
    Local $saveFolder = @ScriptDir & "\Screenshots\"  ; Saves in a "Screenshots" folder next to the script

    ; Create the folder if it doesn’t exist
    If Not FileExists($saveFolder) Then DirCreate($saveFolder)

    ; Get current timestamp for the filename
    Local $timestamp = _Now()
    $timestamp = StringReplace($timestamp, "/", "-")
    $timestamp = StringReplace($timestamp, ":", "-")
    $timestamp = StringReplace($timestamp, " ", "_")

    ; Define the file path
    Local $filePath = $saveFolder & "Screenshot_" & $timestamp & ".png"

    ; Capture the entire screen and save it
    _ScreenCapture_Capture($filePath)

    ; Notify the user
    TrayTip("Screenshot Captured", "Saved as: " & $filePath, 3)
EndFunc

While True
    Sleep(100) ; Keeps the script running
WEnd


Question 15) Basic Countdown Timer

#include <GUIConstantsEx.au3>
#include <MsgBoxConstants.au3>
#include <StaticConstants.au3> ; Include this for $GUI_SS_DEFAULT_LABEL

; Create GUI
$hGUI = GUICreate("Countdown Timer", 300, 150)
GUICtrlCreateLabel("Set Timer (Seconds):", 10, 20, 150, 20)
$inputTime = GUICtrlCreateInput("", 150, 20, 100, 20)
$btnStart = GUICtrlCreateButton("Start Timer", 100, 60, 100, 30)
$lblCountdown = GUICtrlCreateLabel("", 100, 100, 100, 20, $GUI_SS_DEFAULT_LABEL)

GUISetState(@SW_SHOW, $hGUI)

; Event loop
While 1
    Switch GUIGetMsg()
        Case $GUI_EVENT_CLOSE
            Exit

        Case $btnStart
            ; Get the time input and validate
            Local $inputValue = GUICtrlRead($inputTime)
            If StringIsInt($inputValue) And $inputValue > 0 Then
                Local $timeLeft = Int($inputValue) ; Convert the input to an integer
                ; Start the countdown
                While $timeLeft > 0
                    GUICtrlSetData($lblCountdown, $timeLeft & " seconds remaining")
                    Sleep(1000) ; Wait for 1 second
                    $timeLeft -= 1 ; Decrease time by 1 second
                WEnd
                MsgBox($MB_ICONINFORMATION, "Time's Up!", "The countdown has reached zero!")
                GUICtrlSetData($lblCountdown, "")
            Else
                MsgBox($MB_ICONERROR, "Error", "Please enter a valid positive number of seconds.")
            EndIf
    EndSwitch
WEnd



Question 16) Desktop Cleaner Helper

#include <File.au3>
Local $desktopPath = @DesktopDir
Local $shortcutFolder = $desktopPath & "\Shortcut"
If Not FileExists($shortcutFolder) Then
DirCreate($shortcutFolder)
EndIf
Local $files = _FileListToArray($desktopPath,"*.*", 1)
If Not @error Then
For $i = 1 To $files[0]
Local $sourceFile = $desktopPath & "\" & $files[$i]
Local $destinationFile = $shortcutFolder & "\" & $files[$i]
FileMove($sourceFile, $destinationFile, 9)
Next
Else
MsgBox(64,"Info","No files found on the desktop.")
EndIf
MsgBox(64,"Done","All files have been moved to the 'Shortcut' folder.")


Question 17) Custom Shutdown Timer

#include <GUIConstantsEx.au3>

; Create GUI
$gui = GUICreate("Custom Shutdown Timer", 300, 150)
GUICtrlCreateLabel("Enter shutdown time in minutes:", 20, 20, 250, 20)
$input = GUICtrlCreateInput("", 20, 50, 100, 20)
$shutdownButton = GUICtrlCreateButton("Schedule Shutdown", 20, 90, 120, 30)
$cancelButton = GUICtrlCreateButton("Cancel Shutdown", 150, 90, 120, 30)

GUISetState(@SW_SHOW)

While 1
    $msg = GUIGetMsg()
    Select
        Case $msg = $GUI_EVENT_CLOSE
            ExitLoop

        Case $msg = $shutdownButton
            ; Get the input time and validate
            $minutes = GUICtrlRead($input)
            If StringIsInt($minutes) And $minutes > 0 Then
                ; Convert minutes to seconds
                $seconds = $minutes * 60
                ; Schedule shutdown
                Run(@ComSpec & " /c shutdown -s -t " & $seconds, "", @SW_HIDE)
                MsgBox(64, "Shutdown Scheduled", "System will shut down in " & $minutes & " minute(s).")
            Else
                MsgBox(16, "Invalid Input", "Please enter a valid positive integer.")
            EndIf

        Case $msg = $cancelButton
            ; Cancel any scheduled shutdown
            Run(@ComSpec & " /c shutdown -a", "", @SW_HIDE)
            MsgBox(64, "Shutdown Cancelled", "Any scheduled shutdown has been canceled.")
    EndSelect
WEnd

; Cleanup
GUIDelete($gui)
Exit


Question 18) Random Password Generator

#include <MsgBoxConstants.au3>
#include <Array.au3>

Func GeneratePassword($length)
    ; Define character pools
    Local $letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
    Local $numbers = "0123456789"
    Local $specials = "!@#$%^&*()-_=+[]{};:'"",.<>?/|`~"
    Local $allCharacters = $letters & $numbers & $specials

    ; Initialize password string
    Local $password = ""

    ; Ensure the password includes at least one character from each group
    $password &= StringMid($letters, Random(1, StringLen($letters), 1), 1)
    $password &= StringMid($numbers, Random(1, StringLen($numbers), 1), 1)
    $password &= StringMid($specials, Random(1, StringLen($specials), 1), 1)

    ; Generate the rest of the password randomly from all characters
    For $i = 1 To $length - 3
        $password &= StringMid($allCharacters, Random(1, StringLen($allCharacters), 1), 1)
    Next

    ; Shuffle the password to randomize the order
    Local $passwordArray = StringSplit($password, "", 2)
    _ArrayShuffle($passwordArray)
    $password = _ArrayToString($passwordArray, "")

    Return $password
EndFunc

; Prompt user for password length
Local $length = InputBox("Random Password Generator", "Enter the desired password length:", "12", "", -1, -1, 0, 0)
If @error Then Exit ; Exit if user cancels

; Validate input
If Not StringIsInt($length) Or $length < 4 Then
    MsgBox($MB_ICONERROR, "Error", "Password length must be a number and at least 4.")
    Exit
EndIf

; Generate and display the password
Local $password = GeneratePassword(Int($length))
MsgBox($MB_ICONINFORMATION, "Generated Password", "Your random password is: " & @CRLF & $password)




Scripts:

RunWait('Calc')
RunWait('Notepad')
MsgBox(64,'Functions','I, Sudharsana started a calculator and notepad')




#include <MsgBoxConstants.au3>
#include <StringConstants.au3>

Local $aResult = StringRegExp("This is a test example", '(test)', $STR_REGEXPARRAYMATCH)
If Not @error Then
	MsgBox($MB_OK, "SRE Example  Result", $aResult[0])
EndIf

$aResult = StringRegExp("This is a test example", '(te)(st)', $STR_REGEXPARRAYMATCH)
If Not @error Then
	MsgBox($MB_OK, "SRE Example 4 Result", $aResult[0] & "," & $aResult[1])
EndIf






